{"meta":{"title":"从零开始的小站","subtitle":null,"description":"遇事不决，可问春风","author":"AmyZ","url":""},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-08-01T07:02:13.537Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"about","date":"2020-08-01T14:14:36.000Z","updated":"2020-08-01T07:01:50.087Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[Re:ゼロからの小站~AmyZ] 与&nbsp; AmyZ&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-08-01T13:01:03.044Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-08-01T12:40:06.566Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"theme-sakura","date":"2020-08-01T14:53:25.000Z","updated":"2020-08-01T06:45:36.281Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"关于Java的一些比较杂的知识","slug":"some-java-think","date":"2020-08-02T02:48:02.000Z","updated":"2020-08-02T07:07:42.655Z","comments":true,"path":"some-java-think/","link":"","permalink":"/some-java-think/","excerpt":"","text":"操作系统：进程和线程的区别，进程间通信的方式，线程同步机制，信号量的实现原理1、进程和线程的区别进程是运行中的程序，线程是进程中内部的执行序列。进程是资源分配的单元，线程是执行单元。进程之间切换耗时大，线程之间切换耗时小。进程占的资源多，线程占的资源少。多个线程共享进程中的资源。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"reprinted articles","slug":"reprinted-articles","date":"2020-08-01T11:14:41.000Z","updated":"2020-08-01T11:21:12.508Z","comments":true,"path":"reprinted-articles/","link":"","permalink":"/reprinted-articles/","excerpt":"","text":"转载测试","categories":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}],"tags":[],"keywords":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}]},{"title":"suixiang-test","slug":"suixiang-test","date":"2020-08-01T11:03:19.000Z","updated":"2020-08-01T11:21:22.877Z","comments":true,"path":"suixiang-test/","link":"","permalink":"/suixiang-test/","excerpt":"","text":"随想测试","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]},{"title":"Prometheus+Grafana安装及使用","slug":"prometheus-grafana","date":"2020-08-01T05:47:15.000Z","updated":"2020-08-01T11:21:29.360Z","comments":true,"path":"prometheus-grafana/","link":"","permalink":"/prometheus-grafana/","excerpt":"","text":"Prometheus安装及使用该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构： 我们用到了下面exporter：node_exporter – 用于机器系统数据收集（主要是cpu等信息的收集） 首先安装GO每个需要检测的服务器都要安装go $ yum install go $ go version $ go version go1.6.3 linux/amd64 下载安装Prometheus（https://prometheus.io/download/）$ wget https://github.com/prometheus/prometheus/releases/download/v2.3.0/prometheus-2.3.0.linux-amd64.tar.gz $ tar zxvf prometheus-2.3.0.linux-amd64.tar.gz -C /usr/local/ $ ln -sv /usr/local/prometheus-2.3.0.linux-amd64/ /usr/local/prometheus $ cd /usr/local/prometheus 首先，在创造上的主机文件系统的最小Prometheus配置文件prometheus.yml （替换你要监控的IP地址）： # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global &#39;evaluation_interval&#39;. rule_files: # - &quot;first_rules.yml&quot; # - &quot;second_rules.yml&quot; # A scrape configuration containing exactly one endpoint to scrape: # Here it&#39;s Prometheus itself. scrape_configs: # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config. - job_name: &#39;prometheus&#39; # metrics_path defaults to &#39;/metrics&#39; # scheme defaults to &#39;http&#39;. static_configs: - targets: [&#39;localhost:9090&#39;] - job_name: linux static_configs: - targets: [&#39;192.168.5.71:9100&#39;,&#39;192.168.5.73:9100&#39;] 192.168.5.73是我们另一个服务器的IP，端口则是对应的exporter的监听端口。 启动Prometheus$ ./prometheus --config.file=prometheus.yml 如果想后台运行的话就用nohup $ nohup ./prometheus --config.file=prometheus.yml &amp; Prometheus内置了一个web界面，我们可通过http://monitor_host:9090进行访问： 安装并运行exporter下载exporters并解压到被监控端服务器： $ wget https://github.com/prometheus/node_exporter/releases/download/v0.14.0/node_exporter-0.14.0.linux-amd64.tar.gz $ tar xvf node_exporter-0.14.0.linux-amd64.tar.gz -C /usr/local/ $ nohup /usr/local/node_exporter-0.14.0.linux-amd64/node_exporter &amp; 我们再次回到Status-&gt;Targets页面，可以看到两个Target的状态已经变成UP了:Prometheus自带的图形并不够强大，于是我们可以使用Grafana作为Prometheus的Dashboard。 安装运行GrafanaGrafana安装配置介绍$ wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.2.0-1.x86_64.rpm $ sudo yum localinstall grafana-4.2.0-1.x86_64.rpm 编辑配置文件/etc/grafana/grafana.ini，修改dashboards.json段落下两个参数的值： [dashboards.json] enabled = true path = /var/lib/grafana/dashboard 安装仪表盘（Percona提供）$ git clone https://github.com/percona/grafana-dashboards.git $ cp -r grafana-dashboards/dashboards /var/lib/grafana 运行以下命令为Grafana打个补丁，不然图表不能正常显示： $ sed -i &#39;s/expr=\\(.\\)\\.replace(\\(.\\)\\.expr,\\(.\\)\\.scopedVars\\(.*\\)var \\(.\\)=\\(.\\)\\.interval/expr=\\1.replace(\\2.expr,\\3.scopedVars\\4var \\5=\\1.replace(\\6.interval, \\3.scopedVars)/&#39; /usr/share/grafana/public/app/plugins/datasource/prometheus/datasource.js $ sed -i &#39;s/,range_input/.replace(\\/&quot;{\\/g,&quot;\\\\&quot;&quot;).replace(\\/}&quot;\\/g,&quot;\\\\&quot;&quot;),range_input/; s/step_input:&quot;&quot;/step_input:this.target.step/&#39; /usr/share/grafana/public/app/plugins/datasource/prometheus/query_ctrl.js 最后我们运行Grafana服务$ systemctl daemon-reload $ systemctl start grafana-server $ systemctl status grafana-server 我们可通过http://monitor_host:3000访问Grafana网页界面（缺省的帐号/密码为admin/admin）: 给Grafana添加数据源，数据源有多种，例如：Graphite、CloudWatch、Elasticsearch、InfluxDB、OpenTSDB、Prometheus。这里我们选择用Prometheus： 下面是展示部分数据分析图： Grafana基本概念以及使用Data Source：grafana确切的说是一个前端展示工具，将数据以非常美观直接的图形展示出来。那么这些数据必须有一个来源吧，grafana获取数据的地方就称为Data Source。官方文档上说grafana支持以下数据源：Graphite, InfluxDB, OpenTSDB, Prometheus, Elasticsearch, CloudWatch。在Grafana 3.0+之后，grafana不仅仅支持上面说的这些数据源，还支持一些其它的数据源，这些就称为Grafana Plugins，grafana支持的插件非常多（grafana支持的插件传送门），只要做一些简单的插件安装配置，你就能获取丰富的数据源，后面的文章会讲解如何安装配置使用grafana-zabbix，elasticsearch等插件。 DashBoard：仪表盘，就像汽车仪表盘一样可以展示很多信息，包括车速，水箱温度等。Grafana的DashBoard就是以各种图形的方式来展示从Datasource拿到的数据。 Row：DashBoard的基本组成单元，一个DashBoard可以包含很多个row。一个row可以展示一种信息或者多种信息的组合，比如系统内存使用率，CPU五分钟及十分钟平均负载等。所以在一个DashBoard上可以集中展示很多内容。 Panel：面板，实际上就是row展示信息的方式，支持表格（table），列表（alert list），热图（Heatmap）等多种方式，具体可以去官网上查阅。 Query Editor：用来指定获取哪一部分数据。类似于sql查询语句，比如你要在某个row里面展示test这张表的数据，那么Query Editor里面就可以写成select *from test。这只是一种比方，实际上每个DataSource获取数据的方式都不一样，所以写法也不一样，比如像zabbix，数据是以指定某个监控项的方式来获取的。 Organization：org是一个很大的概念，每个用户可以拥有多个org，grafana有一个默认的main org。用户登录后可以在不同的org之间切换，前提是该用户拥有多个org。不同的org之间完全不一样，包括datasource，dashboard等都不一样。创建一个org就相当于开了一个全新的视图，所有的datasource，dashboard等都要再重新开始创建。 User：这个概念应该很简单，不用多说。Grafana里面用户有三种角色admin,editor,viewer。admin权限最高，可以执行任何操作，包括创建用户，新增Datasource，创建DashBoard。editor角色不可以创建用户，不可以新增Datasource，可以创建DashBoard。viewer角色仅可以查看DashBoard。在2.1版本及之后新增了一种角色read only editor（只读编辑模式），这种模式允许用户修改DashBoard，但是不允许保存。每个user可以拥有多个organization。 prometheus监控设备基础项简单整理一些常规的监控查询语句，也可以直接从grafana官网下载相关的模板，模板中有相当高效优质的查询语句，推荐使用模板 cpu一分钟负载node_load1 cpu五分钟负载node_load5 cpu十五分钟负载node_load15 内存总量node_memory_MemTotal 占用内存（不准确）node_memory_MemTotal-node_memory_MemFree 可用内存node_memory_MemFree 可用空间node_filesystem_avail{device=~”/dev/.+”} 总空间node_filesystem_size{device=~”/dev/.+”} 已用空间node_filesystem_size{device=~”/dev/.+”}-node_filesystem_avail{device=~”/dev/.+”} IO读bytenode_disk_bytes_read{device=~”sd.+”} IO写bytenode_disk_bytes_written{device=~”sd.+”} 接收流量统计node_network_receive_bytes{device=~”eth.+”} 发送流量统计node_network_transmit_bytes{device=~”eth.+”} 运行时间node_boot_time Prometheus查询Prometheus提供了一种功能表达式语言，允许用户实时选择和汇总时间序列数据。表达式的结果可以显示为图形，在Prometheus的表达式浏览器中显示为表格数据，或者由外部系统通过HTTP API使用。 假如我要计算go_gc_duration_seconds_sum，在Metrics里的query写下 go_gc_duration_seconds_sum （注意：Panel data source不要选错，选择你一开始设定的数据源）如下图： =：选择与提供的字符串完全相同的标签。 !=：选择不等于提供的字符串的标签。 =~：选择正则表达式匹配提供的字符串（或子字符串）的标签。 !~：选择不与提供的字符串（或子字符串）正则表达式匹配的标签。 可以通过{}来进行监测服务器的过滤，例如选择job=“linux”的服务器，在Metrics里的query写下： go_gc_duration_seconds_sum{job=&quot;linux&quot;} 如下图：当然可以选择自己想要监控的服务器名称，例如选择71和73这两个服务器，在Metrics里的query写下： go_gc_duration_seconds_sum{instance=~&quot;192.168.5.71:9100|192.168.5.73:9100&quot;} 如下图： 如果计算连个服务器数据的和，在表达式前加sum(),若果是求平均，加avg（），这里算求和，在Metrics里的query写下： sum(go_gc_duration_seconds_sum{instance=~&quot;192.168.5.71:9100|192.168.5.73:9100&quot;}) （注意：Legend format可以编写你算出来的表达式的名字）如下图： 同理，其他聚合函数如平均avg(),最小min()，最大max()等等。 如果一个查询方法经常使用，例如： sum(go_gc_duration_seconds_sum{instance=~&quot;192.168.5.71:9100|192.168.5.73:9100&quot;}) =~可以搭配通配符来使用，例如： go_gc_duration_seconds_sum{instance=~&quot;.*:9100&quot;} 意思为把所有后缀为:9100的instance全部计算出来。常用的表达式写入rule文件中，写入之后，在在Metrics里的query中写你定义的record中的名字即可。这样做的好处是在收集数据时在时序数据库中就已经存好了你要查询的值，直接调用即可，不用再次计算，节省CPU。 rate(查询语句)[5m] 代表5分钟内的数据 点这里查看更多查询语法Prometheus录制规则录制规则允许您预先计算经常需要或计算成本高的表达式，并将其结果保存为一组新的时间序列。因此，查询预先计算的结果通常比每次需要时执行原始表达式快得多。这对于仪表板尤其有用，仪表板需要在每次刷新时重复查询相同的表达式。 规则文件的语法是：groups: [ - &lt;rule_group&gt; ] 一个简单的示例规则文件是：groups: - name: example rules: - record: job:http_inprogress_requests:sum expr: sum(http_inprogress_requests) by (job) &lt;rule_group&gt;# The name of the group. Must be unique within a file. name: &lt;string&gt; # How often rules in the group are evaluated. [ interval: &lt;duration&gt; | default = global.evaluation_interval ] rules: [ - &lt;rule&gt; ... ] Prometheus动态配置目标最简单的配置是静态目标： scrape_configs: - job_name: &#39;prometheus&#39; static_configs: - targets: [&#39;localhost:9090&#39;, &#39;localhost:9100&#39;] labels: group: &#39;prometheus&#39; 更改此文件后，可以发送 SIGHUP 触发配置重新加载。Prometheus 提供了服务发现功能，可以从 consul, dns, kubernetes, file 等等多种来源发现新的目标。 其中最简单的是从文件发现服务。 例如 /usr/local/prometheus/prometheus.yml 配置如下： # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global &#39;evaluation_interval&#39;. rule_files: - &quot;first_rules.yml&quot; # - &quot;second_rules.yml&quot; # A scrape configuration containing exactly one endpoint to scrape: # Here it&#39;s Prometheus itself. scrape_configs: # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config. - job_name: &#39;prometheus&#39; # metrics_path defaults to &#39;/metrics&#39; # scheme defaults to &#39;http&#39;. static_configs: - targets: [&#39;localhost:9090&#39;] - job_name: linux static_configs: - targets: [&#39;192.168.5.71:9100&#39;] labels: group: &quot;bbb&quot; - job_name: &#39;test&#39; file_sd_configs: - files: [&#39;/usr/local/prometheus/test_sd_config/*.yml&#39;] refresh_interval: 5s 启动 prometheus: nohup ./prometheus --config.file=prometheus.yml &amp; 创建 /usr/local/prometheus/test_sd_config/test.yml 如下 - targets: [ &quot;192.168.5.75:9100&quot; ] labels: group: &quot;aaa&quot; 5s内就会自动读取 test.yml 并添加新的目标。可用浏览器打开Prometheus 9090 端口,查看 Status 中的 Configuration, Targets, Service Discovery,可以看到新添加的目标。 去掉导航栏在Grafana页面中，按F12打开控制台，看source中加载的css文件，里面有一个带数字的css（好像是一共有两个css，其中一个），去linux中的public/css文件夹中找到相应的css文件，前面加上 .navbar-inner{display:none}; 然后重启Grafana服务（一定要关掉服务，不然不能加载出修改的css） 有关于Prometheus的介绍、概念、使用等具体问题请参考下面网址：Prometheus官网 有关于Grafana的介绍、概念、使用等具体问题请参考下面网址:Grafana官网","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"通过Rancher安装K8s","slug":"rancher-install-k8s","date":"2020-08-01T05:14:19.000Z","updated":"2020-08-01T11:21:36.340Z","comments":true,"path":"rancher-install-k8s/","link":"","permalink":"/rancher-install-k8s/","excerpt":"","text":"环境准备1.hostvi /etc/hosts 由上图可知，采用了三个节点来部署k8s，一个master主节点，两个子节点。主节点负责调度，子节点负责处理任务。 2.关闭swap分区、防火墙、SElinux# k8s要求关闭swap (qxl) swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 # 关闭swap sed -ri &#39;/^[^#]*swap/s@^@#@&#39; /etc/fstab # 取消开机挂载swap systemctl disable --now firewalld # 关闭防火墙 # 关闭SElinux setenforce 0 sed -i &#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39; /etc/selinux/config 3.安装dockerdocker安装官方文档 # 卸载原来的docker sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine # 安装依赖 sudo yum update -y &amp;&amp; sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 # 添加官方yum库 sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo # 安装docker sudo yum install docker-ce docker-ce-cli containerd.io # 查看docker版本 docker --version # 开机启动 systemctl enable --now docker 安装rancher官方安装文档 对于学习k8s来说我们选择方案A-使用默认自签名证书就可以。 docker run -d --restart=unless-stopped \\ -p 80:80 -p 443:443 \\ -v &lt;主机路径&gt;:/var/lib/rancher/ \\ -v /root/var/log/auditlog:/var/log/auditlog \\ -e AUDIT_LEVEL=3 \\ rancher/rancher:stable (或者rancher/rancher:latest) 如果不想用最新的rancher，建议使用以下版本： docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:v2.2.5 利用rancher搭建k8s安装完成后，直接在浏览器上访问你的主机ip就可以。（建议使用火狐浏览器，谷歌因为证书等原因无法打开） 设置密码并进入下一步。 确认rancher管理地址。 选择添加集群。 选择custom。 对集群起个名字，这里我选择flannel网络组件，根据自己需求来。 在主节点我选择了etcd与control选项，复制生成的命令在主节点运行。子节点选择worker选项，复制生成的命令在子节点运行。 接下来就等待集群自动建成，时间略长，建议喝杯咖啡。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"GitHub图片不显示问题解决","slug":"github-img-don-t-show","date":"2020-08-01T02:13:19.000Z","updated":"2020-08-01T06:00:23.374Z","comments":true,"path":"github-img-don-t-show/","link":"","permalink":"/github-img-don-t-show/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Github上的图片不显示这个问题困扰我好久了，之前一直觉得用不太到，也就没解决，今天在写通过Rancher安装k8s这篇博客时才发现不得不解决这个问题了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过谷歌，博主john-zeng这样解释道： 实际上，可以认为，ERR_CERT_COMMON_NAME_INVALID就是用一个错误的域名访问了某个节点的https资源。导致这个错误的原因，基本是： dns污染 host设置错误 官方更新了dns，但是dns缓存没有被更新，导致错误解析。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是说我们需要本地hosts文件对网站进行域名解析，Windows系统hosts文件位置：C:\\Windows\\System32\\drivers\\etc\\hosts，在hosts文件中添加 # GitHub Start 140.82.113.3 github.com 140.82.114.20 gist.github.com 151.101.184.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.184.133 gist.githubusercontent.com 151.101.184.133 cloud.githubusercontent.com 151.101.184.133 camo.githubusercontent.com 151.101.184.133 avatars0.githubusercontent.com 199.232.68.133 avatars0.githubusercontent.com 199.232.28.133 avatars1.githubusercontent.com 151.101.184.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 199.232.28.133 avatars2.githubusercontent.com 151.101.184.133 avatars3.githubusercontent.com 199.232.68.133 avatars3.githubusercontent.com 151.101.184.133 avatars4.githubusercontent.com 199.232.68.133 avatars4.githubusercontent.com 151.101.184.133 avatars5.githubusercontent.com 199.232.68.133 avatars5.githubusercontent.com 151.101.184.133 avatars6.githubusercontent.com 199.232.68.133 avatars6.githubusercontent.com 151.101.184.133 avatars7.githubusercontent.com 199.232.68.133 avatars7.githubusercontent.com 151.101.184.133 avatars8.githubusercontent.com 199.232.68.133 avatars8.githubusercontent.com # GitHub End &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改完hosts文件后再刷新下DNS缓存就大功告成啦，刷新DNS缓存命令为ipconfig /flushdns，这里的命令需要在CMD中运行，做到这里就可以恭喜你可以继续在GitHub上愉快的玩耍了：）。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}